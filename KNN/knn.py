"""KNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KewXXsaSC_TFrW6QRpoPfFaxp4mCIbfy

## Understanding and implementation of KNN algorithm

IMPORTS
"""

import pandas as pd
import matplotlib.pyplot as plt
import math

"""**Defining KNN function that gets dataset and target values as required arugument and K value as the default argument.**"""

def KNN(data, target, k=1):
    sqs = []
    # Distance calculations
    for i in range(len(data['Brightness'])):
        val = (target['Brightness']-data['Brightness'][i])**2 + (target['Saturation']-data['Saturation'][i])**2
        sqs.append([math.sqrt(val), data['Class'][i]])

    # sort the squares
    sqs.sort()

    res_class = []
    # taking first k nearest neighbors
    print('\nNearest Neighbors :')
    for i in range(k):
        res_class.append(sqs[i][1])
        print('Class :',sqs[i][1],'Distance :',sqs[i][0])

    # Finding Majority
    max_count = 0
    max_class = ''
    print('\nMajority :')
    for cls in set(res_class):
        count = res_class.count(cls)
        print(cls,'Count :',count)
        if count > max_count:
            max_count = count
            max_class = cls

    print('\nPredicted Class :',max_class)

# Example training dataset
data = {
    'Brightness':[40,50,60,10,70,60,25],
    'Saturation':[20,50,90,25,70,10,80],
    'Class':['Red','Blue','Blue','Red','Blue','Red','Blue']
}

# Example testing dataset
target = {
    'Brightness': 20,
    'Saturation': 35
}

KNN(data, target, k=5)

"""## Tesing with actucal datasets"""

df = pd.read_csv('../Dataset/auto-mpg.csv')
df.dropna()
df.head()

"""**Mannualy definig algorithm but it will not handle for all kind of data inputs**"""

def KNN(data, target, k=1):
    sqs = []
    # Distance calculations
    for i in range(len(data['cylinders'])):
        val = (target['cylinders']-data['cylinders'][i])**2 + (target['acceleration']-data['acceleration'][i])**2 + (target['displacement']-data['displacement'][i])**2 + (target['weight']-data['weight'][i])**2
        sqs.append([math.sqrt(val), data['horsepower'][i]])

    # sort the squares
    sqs.sort()

    res_class = []
    # taking first k nearest neighbors
    print('\nNearest Neighbors :')
    for i in range(k):
        res_class.append(sqs[i][1])
        print('Class :',sqs[i][1],'Distance :',sqs[i][0])

    # Finding Majority
    max_count = 0
    max_class = ''
    print('\nMajority :')
    for cls in set(res_class):
        count = res_class.count(cls)
        print(cls,'Count :',count)
        if count > max_count:
            max_count = count
            max_class = cls

    print('\nPredicted Horsepower :',max_class)

# test data with new values as inputs
"""
new value :
cylinders = 8
displacement = 350
weight = 3000
acceleration = 15

horsepower = ?
"""

new_data = {
    'cylinders': 8,
    'displacement': 350,
    'weight': 3000,
    'acceleration': 15
}

KNN(df,new_data,k=5)

"""**Implementing through the python module**"""

# installing required module
# pip install -q scikit-learn

from sklearn.neighbors import KNeighborsClassifier

KNN = KNeighborsClassifier(n_neighbors=3)

x = df[['cylinders','displacement','acceleration','weight']]
y = df['horsepower']

KNN.fit(x,y)

pred = KNN.predict([[8,350,15,3000]])

print(f"Predicted horsepower: {pred[0]}")

"""The scikit-learn's KNN algorithm and the above manual definition produces the same result for the prdiction"""